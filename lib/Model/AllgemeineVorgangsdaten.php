<?php
/**
 * AllgemeineVorgangsdaten
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ratenkauf REST API
 *
 * Version: V2  With the help of the REST API, webshop operators or business partners can integrate the ratenkauf by easyCredit into a webshop. Thus you have the possibility to integrate the ratenkauf by easyCredit into your webshop according to your own needs.  To initialize and complete a Ratenkauf using the REST API,the webshop system must authenticate itself against the REST API installment purchase. To do this, the webshop ID and the API password must be entered in the respective attributes in the header of the request.  You will receive your personal webshop identification after conclusion of the contract with us.  Would you like to use installment purchase by easyCredit?  Register directly under: [Registration](https://www.easycredit.de/ratenkaufpartner/registrierung.htm) and we will get in touch with you.   On our Ratenkauf Partner Site [Ratenkauf Partner Site](https://www.easycredit-ratenkauf.de/einbindung.htm)  we provide many shop plugins and additional integration guides.  API Root URL: https://ratenkauf.easycredit.de/ratenkauf-ws/rest/v2
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vismutx\EasycreditApiPhp\Model;

use \ArrayAccess;
use \Vismutx\EasycreditApiPhp\ObjectSerializer;

/**
 * AllgemeineVorgangsdaten Class Doc Comment
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllgemeineVorgangsdaten implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AllgemeineVorgangsdaten';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shop_kennung' => 'string',
        'tb_vorgangskennung' => 'string',
        'shop_vorgangskennung' => 'string',
        'fachliche_vorgangskennung' => 'string',
        'device_ident_token' => 'string',
        'status' => 'string',
        'url_vorvertragliche_informationen' => 'string',
        'haendlerspezifischer_zinssatz' => 'float',
        'moegliche_ratenplaene' => '\Vismutx\EasycreditApiPhp\Model\Ratenplan[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shop_kennung' => null,
        'tb_vorgangskennung' => null,
        'shop_vorgangskennung' => null,
        'fachliche_vorgangskennung' => null,
        'device_ident_token' => null,
        'status' => null,
        'url_vorvertragliche_informationen' => null,
        'haendlerspezifischer_zinssatz' => 'float',
        'moegliche_ratenplaene' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shop_kennung' => 'shopKennung',
        'tb_vorgangskennung' => 'tbVorgangskennung',
        'shop_vorgangskennung' => 'shopVorgangskennung',
        'fachliche_vorgangskennung' => 'fachlicheVorgangskennung',
        'device_ident_token' => 'deviceIdentToken',
        'status' => 'status',
        'url_vorvertragliche_informationen' => 'urlVorvertraglicheInformationen',
        'haendlerspezifischer_zinssatz' => 'haendlerspezifischerZinssatz',
        'moegliche_ratenplaene' => 'moeglicheRatenplaene'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shop_kennung' => 'setShopKennung',
        'tb_vorgangskennung' => 'setTbVorgangskennung',
        'shop_vorgangskennung' => 'setShopVorgangskennung',
        'fachliche_vorgangskennung' => 'setFachlicheVorgangskennung',
        'device_ident_token' => 'setDeviceIdentToken',
        'status' => 'setStatus',
        'url_vorvertragliche_informationen' => 'setUrlVorvertraglicheInformationen',
        'haendlerspezifischer_zinssatz' => 'setHaendlerspezifischerZinssatz',
        'moegliche_ratenplaene' => 'setMoeglicheRatenplaene'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shop_kennung' => 'getShopKennung',
        'tb_vorgangskennung' => 'getTbVorgangskennung',
        'shop_vorgangskennung' => 'getShopVorgangskennung',
        'fachliche_vorgangskennung' => 'getFachlicheVorgangskennung',
        'device_ident_token' => 'getDeviceIdentToken',
        'status' => 'getStatus',
        'url_vorvertragliche_informationen' => 'getUrlVorvertraglicheInformationen',
        'haendlerspezifischer_zinssatz' => 'getHaendlerspezifischerZinssatz',
        'moegliche_ratenplaene' => 'getMoeglicheRatenplaene'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_INITIALISIERT = 'INITIALISIERT';
    const STATUS_ZUGESTIMMT = 'ZUGESTIMMT';
    const STATUS_ENTSCHIEDEN = 'ENTSCHIEDEN';
    const STATUS_VORLAEUFIG_BESTAETIGT = 'VORLAEUFIG_BESTAETIGT';
    const STATUS_BESTAETIGT = 'BESTAETIGT';
    const STATUS_STORNIERT = 'STORNIERT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_INITIALISIERT,
            self::STATUS_ZUGESTIMMT,
            self::STATUS_ENTSCHIEDEN,
            self::STATUS_VORLAEUFIG_BESTAETIGT,
            self::STATUS_BESTAETIGT,
            self::STATUS_STORNIERT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shop_kennung'] = isset($data['shop_kennung']) ? $data['shop_kennung'] : null;
        $this->container['tb_vorgangskennung'] = isset($data['tb_vorgangskennung']) ? $data['tb_vorgangskennung'] : null;
        $this->container['shop_vorgangskennung'] = isset($data['shop_vorgangskennung']) ? $data['shop_vorgangskennung'] : null;
        $this->container['fachliche_vorgangskennung'] = isset($data['fachliche_vorgangskennung']) ? $data['fachliche_vorgangskennung'] : null;
        $this->container['device_ident_token'] = isset($data['device_ident_token']) ? $data['device_ident_token'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['url_vorvertragliche_informationen'] = isset($data['url_vorvertragliche_informationen']) ? $data['url_vorvertragliche_informationen'] : null;
        $this->container['haendlerspezifischer_zinssatz'] = isset($data['haendlerspezifischer_zinssatz']) ? $data['haendlerspezifischer_zinssatz'] : null;
        $this->container['moegliche_ratenplaene'] = isset($data['moegliche_ratenplaene']) ? $data['moegliche_ratenplaene'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shop_kennung
     *
     * @return string
     */
    public function getShopKennung()
    {
        return $this->container['shop_kennung'];
    }

    /**
     * Sets shop_kennung
     *
     * @param string $shop_kennung The Webshop-ID specific for ratenkauf by easyCredit
     *
     * @return $this
     */
    public function setShopKennung($shop_kennung)
    {
        $this->container['shop_kennung'] = $shop_kennung;

        return $this;
    }

    /**
     * Gets tb_vorgangskennung
     *
     * @return string
     */
    public function getTbVorgangskennung()
    {
        return $this->container['tb_vorgangskennung'];
    }

    /**
     * Sets tb_vorgangskennung
     *
     * @param string $tb_vorgangskennung Technical transaction id given by ratenkauf by easyCredit.
     *
     * @return $this
     */
    public function setTbVorgangskennung($tb_vorgangskennung)
    {
        $this->container['tb_vorgangskennung'] = $tb_vorgangskennung;

        return $this;
    }

    /**
     * Gets shop_vorgangskennung
     *
     * @return string
     */
    public function getShopVorgangskennung()
    {
        return $this->container['shop_vorgangskennung'];
    }

    /**
     * Sets shop_vorgangskennung
     *
     * @param string $shop_vorgangskennung The webshop-specific transaction identifier
     *
     * @return $this
     */
    public function setShopVorgangskennung($shop_vorgangskennung)
    {
        $this->container['shop_vorgangskennung'] = $shop_vorgangskennung;

        return $this;
    }

    /**
     * Gets fachliche_vorgangskennung
     *
     * @return string
     */
    public function getFachlicheVorgangskennung()
    {
        return $this->container['fachliche_vorgangskennung'];
    }

    /**
     * Sets fachliche_vorgangskennung
     *
     * @param string $fachliche_vorgangskennung Commercial transaction id, which is also communicated to the customer.
     *
     * @return $this
     */
    public function setFachlicheVorgangskennung($fachliche_vorgangskennung)
    {
        $this->container['fachliche_vorgangskennung'] = $fachliche_vorgangskennung;

        return $this;
    }

    /**
     * Gets device_ident_token
     *
     * @return string
     */
    public function getDeviceIdentToken()
    {
        return $this->container['device_ident_token'];
    }

    /**
     * Sets device_ident_token
     *
     * @param string $device_ident_token Token assigned by ratenkauf by easyCredit. This is used for fraud prevention.
     *
     * @return $this
     */
    public function setDeviceIdentToken($device_ident_token)
    {
        $this->container['device_ident_token'] = $device_ident_token;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets url_vorvertragliche_informationen
     *
     * @return string
     */
    public function getUrlVorvertraglicheInformationen()
    {
        return $this->container['url_vorvertragliche_informationen'];
    }

    /**
     * Sets url_vorvertragliche_informationen
     *
     * @param string $url_vorvertragliche_informationen Contains the URL to the pre-contractual information.
     *
     * @return $this
     */
    public function setUrlVorvertraglicheInformationen($url_vorvertragliche_informationen)
    {
        $this->container['url_vorvertragliche_informationen'] = $url_vorvertragliche_informationen;

        return $this;
    }

    /**
     * Gets haendlerspezifischer_zinssatz
     *
     * @return float
     */
    public function getHaendlerspezifischerZinssatz()
    {
        return $this->container['haendlerspezifischer_zinssatz'];
    }

    /**
     * Sets haendlerspezifischer_zinssatz
     *
     * @param float $haendlerspezifischer_zinssatz Merchant specific interest rate
     *
     * @return $this
     */
    public function setHaendlerspezifischerZinssatz($haendlerspezifischer_zinssatz)
    {
        $this->container['haendlerspezifischer_zinssatz'] = $haendlerspezifischer_zinssatz;

        return $this;
    }

    /**
     * Gets moegliche_ratenplaene
     *
     * @return \Vismutx\EasycreditApiPhp\Model\Ratenplan[]
     */
    public function getMoeglicheRatenplaene()
    {
        return $this->container['moegliche_ratenplaene'];
    }

    /**
     * Sets moegliche_ratenplaene
     *
     * @param \Vismutx\EasycreditApiPhp\Model\Ratenplan[] $moegliche_ratenplaene Possible installment plans that can be offered to the customer to finance his shopping basket.
     *
     * @return $this
     */
    public function setMoeglicheRatenplaene($moegliche_ratenplaene)
    {
        $this->container['moegliche_ratenplaene'] = $moegliche_ratenplaene;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


