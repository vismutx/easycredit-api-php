<?php
/**
 * WsMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ratenkauf REST API
 *
 * Version: V2  With the help of the REST API, webshop operators or business partners can integrate the ratenkauf by easyCredit into a webshop. Thus you have the possibility to integrate the ratenkauf by easyCredit into your webshop according to your own needs.  To initialize and complete a Ratenkauf using the REST API,the webshop system must authenticate itself against the REST API installment purchase. To do this, the webshop ID and the API password must be entered in the respective attributes in the header of the request.  You will receive your personal webshop identification after conclusion of the contract with us.  Would you like to use installment purchase by easyCredit?  Register directly under: [Registration](https://www.easycredit.de/ratenkaufpartner/registrierung.htm) and we will get in touch with you.   On our Ratenkauf Partner Site [Ratenkauf Partner Site](https://www.easycredit-ratenkauf.de/einbindung.htm)  we provide many shop plugins and additional integration guides.  API Root URL: https://ratenkauf.easycredit.de/ratenkauf-ws/rest/v2
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vismutx\EasycreditApiPhp\Model;

use \ArrayAccess;
use \Vismutx\EasycreditApiPhp\ObjectSerializer;

/**
 * WsMessage Class Doc Comment
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WsMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WsMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key' => 'string',
        'original_key' => 'string',
        'field' => 'string',
        'severity' => 'string',
        'rendered_message' => 'string',
        'params' => 'string[]',
        'uuid' => 'string',
        'info_fuer_benutzer' => 'string',
        'info_fuer_entwickler' => 'string',
        'fehlerschluessel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key' => null,
        'original_key' => null,
        'field' => null,
        'severity' => null,
        'rendered_message' => null,
        'params' => null,
        'uuid' => null,
        'info_fuer_benutzer' => null,
        'info_fuer_entwickler' => null,
        'fehlerschluessel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'original_key' => 'originalKey',
        'field' => 'field',
        'severity' => 'severity',
        'rendered_message' => 'renderedMessage',
        'params' => 'params',
        'uuid' => 'uuid',
        'info_fuer_benutzer' => 'infoFuerBenutzer',
        'info_fuer_entwickler' => 'infoFuerEntwickler',
        'fehlerschluessel' => 'fehlerschluessel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'original_key' => 'setOriginalKey',
        'field' => 'setField',
        'severity' => 'setSeverity',
        'rendered_message' => 'setRenderedMessage',
        'params' => 'setParams',
        'uuid' => 'setUuid',
        'info_fuer_benutzer' => 'setInfoFuerBenutzer',
        'info_fuer_entwickler' => 'setInfoFuerEntwickler',
        'fehlerschluessel' => 'setFehlerschluessel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'original_key' => 'getOriginalKey',
        'field' => 'getField',
        'severity' => 'getSeverity',
        'rendered_message' => 'getRenderedMessage',
        'params' => 'getParams',
        'uuid' => 'getUuid',
        'info_fuer_benutzer' => 'getInfoFuerBenutzer',
        'info_fuer_entwickler' => 'getInfoFuerEntwickler',
        'fehlerschluessel' => 'getFehlerschluessel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const KEY_ERRORSADRESSE_ERNEUT_EINGEBEN_VERBOTENE_ZEICHEN_VERWENDET = 'Errors.ADRESSE_ERNEUT_EINGEBEN_VERBOTENE_ZEICHEN_VERWENDET';
    const KEY_ERRORSADRESSE_UNBEKANNT = 'Errors.ADRESSE_UNBEKANNT';
    const KEY_ERRORSADRESSE_MEHRDEUTIG = 'Errors.ADRESSE_MEHRDEUTIG';
    const KEY_ERRORSSTRASSE_HNR_NICHT_ANGEGEBEN = 'Errors.STRASSE_HNR_NICHT_ANGEGEBEN';
    const KEY_ERRORSSTRASSE_HNR_HNR_FEHLT = 'Errors.STRASSE_HNR_HNR_FEHLT';
    const KEY_ERRORSSTRASSE_HNR_POSTFACH = 'Errors.STRASSE_HNR_POSTFACH';
    const KEY_ERRORSPLZ_NICHT_ANGEGEBEN = 'Errors.PLZ_NICHT_ANGEGEBEN';
    const KEY_ERRORSORT_NICHT_ANGEGEBEN = 'Errors.ORT_NICHT_ANGEGEBEN';
    const KEY_ERRORSLIEFERADRESSE_FEHLERHAFT = 'Errors.LIEFERADRESSE_FEHLERHAFT';
    const KEY_ERRORSPATTERN_VALIDATION = 'Errors.PATTERN_VALIDATION';
    const KEY_INFOSADRESSE_PRUEFEN_KORRIGIERT = 'Infos.ADRESSE_PRUEFEN_KORRIGIERT';
    const KEY_INFOSADRESSE_PRUEFEN_STRASSE_HNR_KORRIGIERT = 'Infos.ADRESSE_PRUEFEN_STRASSE_HNR_KORRIGIERT';
    const KEY_INFOSADRESSE_PRUEFEN_PLZ_KORRIGIERT = 'Infos.ADRESSE_PRUEFEN_PLZ_KORRIGIERT';
    const KEY_INFOSADRESSE_PRUEFEN_FELD_GEKUERZT = 'Infos.ADRESSE_PRUEFEN_FELD_GEKUERZT';
    const KEY_ERRORSZUGRIFFSFEHLER = 'Errors.ZUGRIFFSFEHLER';
    const KEY_ERRORSWEBSHOP_NICHT_PRODUKTIV = 'Errors.WEBSHOP_NICHT_PRODUKTIV';
    const KEY_ERRORSVORGANG_UNBEKANNT = 'Errors.VORGANG_UNBEKANNT';
    const KEY_ERRORSSTATUS_UNGUELTIG = 'Errors.STATUS_UNGUELTIG';
    const KEY_ERRORSTECHNISCHER_FEHLER = 'Errors.TECHNISCHER_FEHLER';
    const KEY_ERRORSKONTOVERBINDUNG_DEUTSCHLAND = 'Errors.KONTOVERBINDUNG_DEUTSCHLAND';
    const KEY_ERRORSENTSCHEIDUNG_NEGATIV = 'Errors.ENTSCHEIDUNG_NEGATIV';
    const KEY_INFOSERFOLGREICH = 'Infos.ERFOLGREICH';
    const KEY_ERRORSFINANZIERUNGSBETRAG_UNGUELTIG = 'Errors.FINANZIERUNGSBETRAG_UNGUELTIG';
    const KEY_ERRORSLAUFZEIT_UNGUELTIG = 'Errors.LAUFZEIT_UNGUELTIG';
    const KEY_INFOSLAUFZEIT_ANGEPASST = 'Infos.LAUFZEIT_ANGEPASST';
    const KEY_ERRORSNAME_UNVOLLSTAENDIG = 'Errors.NAME_UNVOLLSTAENDIG';
    const KEY_ERRORSDATEN_UNVERAENDERLICH = 'Errors.DATEN_UNVERAENDERLICH';
    const KEY_ERRORSSPEICHERN_NICHT_ERLAUBT = 'Errors.SPEICHERN_NICHT_ERLAUBT';
    const KEY_ERRORSWEBSHOP_UNBEKANNT = 'Errors.WEBSHOP_UNBEKANNT';
    const KEY_BDVK_ERGEBNISINFOSIBAN_GUELTIG = 'BdvkErgebnis.Infos.IBAN_GUELTIG';
    const KEY_BDVK_ERGEBNISINFOSKNR_BLZ_GUELTIG = 'BdvkErgebnis.Infos.KNR_BLZ_GUELTIG';
    const SEVERITY_INFO = 'INFO';
    const SEVERITY_WARNING = 'WARNING';
    const SEVERITY_ERROR = 'ERROR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyAllowableValues()
    {
        return [
            self::KEY_ERRORSADRESSE_ERNEUT_EINGEBEN_VERBOTENE_ZEICHEN_VERWENDET,
            self::KEY_ERRORSADRESSE_UNBEKANNT,
            self::KEY_ERRORSADRESSE_MEHRDEUTIG,
            self::KEY_ERRORSSTRASSE_HNR_NICHT_ANGEGEBEN,
            self::KEY_ERRORSSTRASSE_HNR_HNR_FEHLT,
            self::KEY_ERRORSSTRASSE_HNR_POSTFACH,
            self::KEY_ERRORSPLZ_NICHT_ANGEGEBEN,
            self::KEY_ERRORSORT_NICHT_ANGEGEBEN,
            self::KEY_ERRORSLIEFERADRESSE_FEHLERHAFT,
            self::KEY_ERRORSPATTERN_VALIDATION,
            self::KEY_INFOSADRESSE_PRUEFEN_KORRIGIERT,
            self::KEY_INFOSADRESSE_PRUEFEN_STRASSE_HNR_KORRIGIERT,
            self::KEY_INFOSADRESSE_PRUEFEN_PLZ_KORRIGIERT,
            self::KEY_INFOSADRESSE_PRUEFEN_FELD_GEKUERZT,
            self::KEY_ERRORSZUGRIFFSFEHLER,
            self::KEY_ERRORSWEBSHOP_NICHT_PRODUKTIV,
            self::KEY_ERRORSVORGANG_UNBEKANNT,
            self::KEY_ERRORSSTATUS_UNGUELTIG,
            self::KEY_ERRORSTECHNISCHER_FEHLER,
            self::KEY_ERRORSKONTOVERBINDUNG_DEUTSCHLAND,
            self::KEY_ERRORSENTSCHEIDUNG_NEGATIV,
            self::KEY_INFOSERFOLGREICH,
            self::KEY_ERRORSFINANZIERUNGSBETRAG_UNGUELTIG,
            self::KEY_ERRORSLAUFZEIT_UNGUELTIG,
            self::KEY_INFOSLAUFZEIT_ANGEPASST,
            self::KEY_ERRORSNAME_UNVOLLSTAENDIG,
            self::KEY_ERRORSDATEN_UNVERAENDERLICH,
            self::KEY_ERRORSSPEICHERN_NICHT_ERLAUBT,
            self::KEY_ERRORSWEBSHOP_UNBEKANNT,
            self::KEY_BDVK_ERGEBNISINFOSIBAN_GUELTIG,
            self::KEY_BDVK_ERGEBNISINFOSKNR_BLZ_GUELTIG,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_INFO,
            self::SEVERITY_WARNING,
            self::SEVERITY_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['original_key'] = isset($data['original_key']) ? $data['original_key'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['rendered_message'] = isset($data['rendered_message']) ? $data['rendered_message'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['info_fuer_benutzer'] = isset($data['info_fuer_benutzer']) ? $data['info_fuer_benutzer'] : null;
        $this->container['info_fuer_entwickler'] = isset($data['info_fuer_entwickler']) ? $data['info_fuer_entwickler'] : null;
        $this->container['fehlerschluessel'] = isset($data['fehlerschluessel']) ? $data['fehlerschluessel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        $allowedValues = $this->getKeyAllowableValues();
        if (!is_null($this->container['key']) && !in_array($this->container['key'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'key', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['severity'] === null) {
            $invalidProperties[] = "'severity' can't be null";
        }
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'severity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['rendered_message'] === null) {
            $invalidProperties[] = "'rendered_message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $allowedValues = $this->getKeyAllowableValues();
        if (!in_array($key, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'key', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets original_key
     *
     * @return string
     */
    public function getOriginalKey()
    {
        return $this->container['original_key'];
    }

    /**
     * Sets original_key
     *
     * @param string $original_key original_key
     *
     * @return $this
     */
    public function setOriginalKey($original_key)
    {
        $this->container['original_key'] = $original_key;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity severity
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'severity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets rendered_message
     *
     * @return string
     */
    public function getRenderedMessage()
    {
        return $this->container['rendered_message'];
    }

    /**
     * Sets rendered_message
     *
     * @param string $rendered_message rendered_message
     *
     * @return $this
     */
    public function setRenderedMessage($rendered_message)
    {
        $this->container['rendered_message'] = $rendered_message;

        return $this;
    }

    /**
     * Gets params
     *
     * @return string[]
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param string[] $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets info_fuer_benutzer
     *
     * @return string
     */
    public function getInfoFuerBenutzer()
    {
        return $this->container['info_fuer_benutzer'];
    }

    /**
     * Sets info_fuer_benutzer
     *
     * @param string $info_fuer_benutzer info_fuer_benutzer
     *
     * @return $this
     */
    public function setInfoFuerBenutzer($info_fuer_benutzer)
    {
        $this->container['info_fuer_benutzer'] = $info_fuer_benutzer;

        return $this;
    }

    /**
     * Gets info_fuer_entwickler
     *
     * @return string
     */
    public function getInfoFuerEntwickler()
    {
        return $this->container['info_fuer_entwickler'];
    }

    /**
     * Sets info_fuer_entwickler
     *
     * @param string $info_fuer_entwickler info_fuer_entwickler
     *
     * @return $this
     */
    public function setInfoFuerEntwickler($info_fuer_entwickler)
    {
        $this->container['info_fuer_entwickler'] = $info_fuer_entwickler;

        return $this;
    }

    /**
     * Gets fehlerschluessel
     *
     * @return string
     */
    public function getFehlerschluessel()
    {
        return $this->container['fehlerschluessel'];
    }

    /**
     * Sets fehlerschluessel
     *
     * @param string $fehlerschluessel fehlerschluessel
     *
     * @return $this
     */
    public function setFehlerschluessel($fehlerschluessel)
    {
        $this->container['fehlerschluessel'] = $fehlerschluessel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


