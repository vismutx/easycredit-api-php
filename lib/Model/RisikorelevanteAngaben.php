<?php
/**
 * RisikorelevanteAngaben
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ratenkauf REST API
 *
 * Version: V2  With the help of the REST API, webshop operators or business partners can integrate the ratenkauf by easyCredit into a webshop. Thus you have the possibility to integrate the ratenkauf by easyCredit into your webshop according to your own needs.  To initialize and complete a Ratenkauf using the REST API,the webshop system must authenticate itself against the REST API installment purchase. To do this, the webshop ID and the API password must be entered in the respective attributes in the header of the request.  You will receive your personal webshop identification after conclusion of the contract with us.  Would you like to use installment purchase by easyCredit?  Register directly under: [Registration](https://www.easycredit.de/ratenkaufpartner/registrierung.htm) and we will get in touch with you.   On our Ratenkauf Partner Site [Ratenkauf Partner Site](https://www.easycredit-ratenkauf.de/einbindung.htm)  we provide many shop plugins and additional integration guides.  API Root URL: https://ratenkauf.easycredit.de/ratenkauf-ws/rest/v2
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vismutx\EasycreditApiPhp\Model;

use \ArrayAccess;
use \Vismutx\EasycreditApiPhp\ObjectSerializer;

/**
 * RisikorelevanteAngaben Class Doc Comment
 *
 * @category Class
 * @description risk-relevant information
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RisikorelevanteAngaben implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RisikorelevanteAngaben';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bestellung_erfolgt_ueber_login' => 'bool',
        'kunde_seit' => '\DateTime',
        'anzahl_bestellungen' => 'int',
        'kundenstatus' => 'string',
        'anzahl_produkte_im_warenkorb' => 'int',
        'negative_zahlungsinformation' => 'string',
        'risikoartikel_im_warenkorb' => 'bool',
        'logistik_dienstleister' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bestellung_erfolgt_ueber_login' => null,
        'kunde_seit' => 'date',
        'anzahl_bestellungen' => 'int32',
        'kundenstatus' => null,
        'anzahl_produkte_im_warenkorb' => 'int32',
        'negative_zahlungsinformation' => null,
        'risikoartikel_im_warenkorb' => null,
        'logistik_dienstleister' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bestellung_erfolgt_ueber_login' => 'bestellungErfolgtUeberLogin',
        'kunde_seit' => 'kundeSeit',
        'anzahl_bestellungen' => 'anzahlBestellungen',
        'kundenstatus' => 'kundenstatus',
        'anzahl_produkte_im_warenkorb' => 'anzahlProdukteImWarenkorb',
        'negative_zahlungsinformation' => 'negativeZahlungsinformation',
        'risikoartikel_im_warenkorb' => 'risikoartikelImWarenkorb',
        'logistik_dienstleister' => 'logistikDienstleister'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bestellung_erfolgt_ueber_login' => 'setBestellungErfolgtUeberLogin',
        'kunde_seit' => 'setKundeSeit',
        'anzahl_bestellungen' => 'setAnzahlBestellungen',
        'kundenstatus' => 'setKundenstatus',
        'anzahl_produkte_im_warenkorb' => 'setAnzahlProdukteImWarenkorb',
        'negative_zahlungsinformation' => 'setNegativeZahlungsinformation',
        'risikoartikel_im_warenkorb' => 'setRisikoartikelImWarenkorb',
        'logistik_dienstleister' => 'setLogistikDienstleister'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bestellung_erfolgt_ueber_login' => 'getBestellungErfolgtUeberLogin',
        'kunde_seit' => 'getKundeSeit',
        'anzahl_bestellungen' => 'getAnzahlBestellungen',
        'kundenstatus' => 'getKundenstatus',
        'anzahl_produkte_im_warenkorb' => 'getAnzahlProdukteImWarenkorb',
        'negative_zahlungsinformation' => 'getNegativeZahlungsinformation',
        'risikoartikel_im_warenkorb' => 'getRisikoartikelImWarenkorb',
        'logistik_dienstleister' => 'getLogistikDienstleister'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const KUNDENSTATUS_NEUKUNDE = 'NEUKUNDE';
    const KUNDENSTATUS_BESTANDSKUNDE = 'BESTANDSKUNDE';
    const KUNDENSTATUS_PREMIUMKUNDE = 'PREMIUMKUNDE';
    const NEGATIVE_ZAHLUNGSINFORMATION_KEINE_ZAHLUNGSSTOERUNGEN = 'KEINE_ZAHLUNGSSTOERUNGEN';
    const NEGATIVE_ZAHLUNGSINFORMATION_ZAHLUNGSVERZOEGERUNG = 'ZAHLUNGSVERZOEGERUNG';
    const NEGATIVE_ZAHLUNGSINFORMATION_ZAHLUNGSAUSFALL = 'ZAHLUNGSAUSFALL';
    const NEGATIVE_ZAHLUNGSINFORMATION_KEINE_INFORMATION = 'KEINE_INFORMATION';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKundenstatusAllowableValues()
    {
        return [
            self::KUNDENSTATUS_NEUKUNDE,
            self::KUNDENSTATUS_BESTANDSKUNDE,
            self::KUNDENSTATUS_PREMIUMKUNDE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNegativeZahlungsinformationAllowableValues()
    {
        return [
            self::NEGATIVE_ZAHLUNGSINFORMATION_KEINE_ZAHLUNGSSTOERUNGEN,
            self::NEGATIVE_ZAHLUNGSINFORMATION_ZAHLUNGSVERZOEGERUNG,
            self::NEGATIVE_ZAHLUNGSINFORMATION_ZAHLUNGSAUSFALL,
            self::NEGATIVE_ZAHLUNGSINFORMATION_KEINE_INFORMATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bestellung_erfolgt_ueber_login'] = isset($data['bestellung_erfolgt_ueber_login']) ? $data['bestellung_erfolgt_ueber_login'] : null;
        $this->container['kunde_seit'] = isset($data['kunde_seit']) ? $data['kunde_seit'] : null;
        $this->container['anzahl_bestellungen'] = isset($data['anzahl_bestellungen']) ? $data['anzahl_bestellungen'] : null;
        $this->container['kundenstatus'] = isset($data['kundenstatus']) ? $data['kundenstatus'] : null;
        $this->container['anzahl_produkte_im_warenkorb'] = isset($data['anzahl_produkte_im_warenkorb']) ? $data['anzahl_produkte_im_warenkorb'] : null;
        $this->container['negative_zahlungsinformation'] = isset($data['negative_zahlungsinformation']) ? $data['negative_zahlungsinformation'] : null;
        $this->container['risikoartikel_im_warenkorb'] = isset($data['risikoartikel_im_warenkorb']) ? $data['risikoartikel_im_warenkorb'] : false;
        $this->container['logistik_dienstleister'] = isset($data['logistik_dienstleister']) ? $data['logistik_dienstleister'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bestellung_erfolgt_ueber_login'] === null) {
            $invalidProperties[] = "'bestellung_erfolgt_ueber_login' can't be null";
        }
        if ($this->container['kunde_seit'] === null) {
            $invalidProperties[] = "'kunde_seit' can't be null";
        }
        if ($this->container['anzahl_bestellungen'] === null) {
            $invalidProperties[] = "'anzahl_bestellungen' can't be null";
        }
        $allowedValues = $this->getKundenstatusAllowableValues();
        if (!is_null($this->container['kundenstatus']) && !in_array($this->container['kundenstatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kundenstatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNegativeZahlungsinformationAllowableValues();
        if (!is_null($this->container['negative_zahlungsinformation']) && !in_array($this->container['negative_zahlungsinformation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'negative_zahlungsinformation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bestellung_erfolgt_ueber_login
     *
     * @return bool
     */
    public function getBestellungErfolgtUeberLogin()
    {
        return $this->container['bestellung_erfolgt_ueber_login'];
    }

    /**
     * Sets bestellung_erfolgt_ueber_login
     *
     * @param bool $bestellung_erfolgt_ueber_login Order with login or without. If the customer has a login in the webshop, kundeSeit and anzahlBestellungen must be submitted.
     *
     * @return $this
     */
    public function setBestellungErfolgtUeberLogin($bestellung_erfolgt_ueber_login)
    {
        $this->container['bestellung_erfolgt_ueber_login'] = $bestellung_erfolgt_ueber_login;

        return $this;
    }

    /**
     * Gets kunde_seit
     *
     * @return \DateTime
     */
    public function getKundeSeit()
    {
        return $this->container['kunde_seit'];
    }

    /**
     * Sets kunde_seit
     *
     * @param \DateTime $kunde_seit Date of first order of the customer in this webshop. Doesn't need to be provided if the customer has no login.
     *
     * @return $this
     */
    public function setKundeSeit($kunde_seit)
    {
        $this->container['kunde_seit'] = $kunde_seit;

        return $this;
    }

    /**
     * Gets anzahl_bestellungen
     *
     * @return int
     */
    public function getAnzahlBestellungen()
    {
        return $this->container['anzahl_bestellungen'];
    }

    /**
     * Sets anzahl_bestellungen
     *
     * @param int $anzahl_bestellungen Total amount of previous orders in this webshop. Doesn't need to be provided if the customer has no login.
     *
     * @return $this
     */
    public function setAnzahlBestellungen($anzahl_bestellungen)
    {
        $this->container['anzahl_bestellungen'] = $anzahl_bestellungen;

        return $this;
    }

    /**
     * Gets kundenstatus
     *
     * @return string
     */
    public function getKundenstatus()
    {
        return $this->container['kundenstatus'];
    }

    /**
     * Sets kundenstatus
     *
     * @param string $kundenstatus Type of customer. NEUKUNDE (new Customer), BESTANDSKUNDE (returning customer) or PREMIUMKUNDE (premium customer)
     *
     * @return $this
     */
    public function setKundenstatus($kundenstatus)
    {
        $allowedValues = $this->getKundenstatusAllowableValues();
        if (!is_null($kundenstatus) && !in_array($kundenstatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kundenstatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kundenstatus'] = $kundenstatus;

        return $this;
    }

    /**
     * Gets anzahl_produkte_im_warenkorb
     *
     * @return int
     */
    public function getAnzahlProdukteImWarenkorb()
    {
        return $this->container['anzahl_produkte_im_warenkorb'];
    }

    /**
     * Sets anzahl_produkte_im_warenkorb
     *
     * @param int $anzahl_produkte_im_warenkorb number of products in shopping cart
     *
     * @return $this
     */
    public function setAnzahlProdukteImWarenkorb($anzahl_produkte_im_warenkorb)
    {
        $this->container['anzahl_produkte_im_warenkorb'] = $anzahl_produkte_im_warenkorb;

        return $this;
    }

    /**
     * Gets negative_zahlungsinformation
     *
     * @return string
     */
    public function getNegativeZahlungsinformation()
    {
        return $this->container['negative_zahlungsinformation'];
    }

    /**
     * Sets negative_zahlungsinformation
     *
     * @param string $negative_zahlungsinformation can be ignored
     *
     * @return $this
     */
    public function setNegativeZahlungsinformation($negative_zahlungsinformation)
    {
        $allowedValues = $this->getNegativeZahlungsinformationAllowableValues();
        if (!is_null($negative_zahlungsinformation) && !in_array($negative_zahlungsinformation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'negative_zahlungsinformation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['negative_zahlungsinformation'] = $negative_zahlungsinformation;

        return $this;
    }

    /**
     * Gets risikoartikel_im_warenkorb
     *
     * @return bool
     */
    public function getRisikoartikelImWarenkorb()
    {
        return $this->container['risikoartikel_im_warenkorb'];
    }

    /**
     * Sets risikoartikel_im_warenkorb
     *
     * @param bool $risikoartikel_im_warenkorb can be ignored
     *
     * @return $this
     */
    public function setRisikoartikelImWarenkorb($risikoartikel_im_warenkorb)
    {
        $this->container['risikoartikel_im_warenkorb'] = $risikoartikel_im_warenkorb;

        return $this;
    }

    /**
     * Gets logistik_dienstleister
     *
     * @return string
     */
    public function getLogistikDienstleister()
    {
        return $this->container['logistik_dienstleister'];
    }

    /**
     * Sets logistik_dienstleister
     *
     * @param string $logistik_dienstleister logistics service provider
     *
     * @return $this
     */
    public function setLogistikDienstleister($logistik_dienstleister)
    {
        $this->container['logistik_dienstleister'] = $logistik_dienstleister;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


