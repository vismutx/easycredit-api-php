<?php
/**
 * VorgangApi
 * PHP version 5
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ratenkauf REST API
 *
 * Version: V2  With the help of the REST API, webshop operators or business partners can integrate the ratenkauf by easyCredit into a webshop. Thus you have the possibility to integrate the ratenkauf by easyCredit into your webshop according to your own needs.  To initialize and complete a Ratenkauf using the REST API,the webshop system must authenticate itself against the REST API installment purchase. To do this, the webshop ID and the API password must be entered in the respective attributes in the header of the request.  You will receive your personal webshop identification after conclusion of the contract with us.  Would you like to use installment purchase by easyCredit?  Register directly under: [Registration](https://www.easycredit.de/ratenkaufpartner/registrierung.htm) and we will get in touch with you.   On our Ratenkauf Partner Site [Ratenkauf Partner Site](https://www.easycredit-ratenkauf.de/einbindung.htm)  we provide many shop plugins and additional integration guides.  API Root URL: https://ratenkauf.easycredit.de/ratenkauf-ws/rest/v2
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vismutx\EasycreditApiPhp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vismutx\EasycreditApiPhp\ApiException;
use Vismutx\EasycreditApiPhp\Configuration;
use Vismutx\EasycreditApiPhp\HeaderSelector;
use Vismutx\EasycreditApiPhp\ObjectSerializer;

/**
 * VorgangApi Class Doc Comment
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VorgangApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation executeBestellungBestaetigen
     *
     * Confirms the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function executeBestellungBestaetigen($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $this->executeBestellungBestaetigenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
    }

    /**
     * Operation executeBestellungBestaetigenWithHttpInfo
     *
     * Confirms the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeBestellungBestaetigenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '';
        $request = $this->executeBestellungBestaetigenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeBestellungBestaetigenAsync
     *
     * Confirms the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeBestellungBestaetigenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executeBestellungBestaetigenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeBestellungBestaetigenAsyncWithHttpInfo
     *
     * Confirms the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeBestellungBestaetigenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '';
        $request = $this->executeBestellungBestaetigenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeBestellungBestaetigen'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeBestellungBestaetigenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeBestellungBestaetigen'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeBestellungBestaetigen'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeBestellungBestaetigen'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/bestaetigen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeEntscheidungLaden
     *
     * Loads the decision result
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\EntscheidungLadenResponse
     */
    public function executeEntscheidungLaden($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->executeEntscheidungLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation executeEntscheidungLadenWithHttpInfo
     *
     * Loads the decision result
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\EntscheidungLadenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeEntscheidungLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\EntscheidungLadenResponse';
        $request = $this->executeEntscheidungLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\EntscheidungLadenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeEntscheidungLadenAsync
     *
     * Loads the decision result
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeEntscheidungLadenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executeEntscheidungLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeEntscheidungLadenAsyncWithHttpInfo
     *
     * Loads the decision result
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeEntscheidungLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\EntscheidungLadenResponse';
        $request = $this->executeEntscheidungLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeEntscheidungLaden'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeEntscheidungLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeEntscheidungLaden'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeEntscheidungLaden'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeEntscheidungLaden'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/entscheidung';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeFinanzierungLaden
     *
     * Loads financing data
     *
     * @param  string $tbk_rk_shop tbk_rk_shop (required)
     * @param  string $tbk_rk_token tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\FinanzierungLadenResponse
     */
    public function executeFinanzierungLaden($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->executeFinanzierungLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation executeFinanzierungLadenWithHttpInfo
     *
     * Loads financing data
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\FinanzierungLadenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeFinanzierungLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\FinanzierungLadenResponse';
        $request = $this->executeFinanzierungLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\FinanzierungLadenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeFinanzierungLadenAsync
     *
     * Loads financing data
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeFinanzierungLadenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executeFinanzierungLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeFinanzierungLadenAsyncWithHttpInfo
     *
     * Loads financing data
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeFinanzierungLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\FinanzierungLadenResponse';
        $request = $this->executeFinanzierungLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeFinanzierungLaden'
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeFinanzierungLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeFinanzierungLaden'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeFinanzierungLaden'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeFinanzierungLaden'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/finanzierung';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executePersonLaden
     *
     * Loads personal customer data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\PersonLadenResponse
     */
    public function executePersonLaden($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->executePersonLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation executePersonLadenWithHttpInfo
     *
     * Loads personal customer data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\PersonLadenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executePersonLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\PersonLadenResponse';
        $request = $this->executePersonLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\PersonLadenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executePersonLadenAsync
     *
     * Loads personal customer data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executePersonLadenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executePersonLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executePersonLadenAsyncWithHttpInfo
     *
     * Loads personal customer data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executePersonLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\PersonLadenResponse';
        $request = $this->executePersonLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executePersonLaden'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executePersonLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executePersonLaden'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executePersonLaden'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executePersonLaden'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/person';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeZustimmungSepa
     *
     * Retrieving the approval text for the SEPA scheme
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\ZustimmungSepaResponse
     */
    public function executeZustimmungSepa($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->executeZustimmungSepaWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation executeZustimmungSepaWithHttpInfo
     *
     * Retrieving the approval text for the SEPA scheme
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\ZustimmungSepaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeZustimmungSepaWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\ZustimmungSepaResponse';
        $request = $this->executeZustimmungSepaRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\ZustimmungSepaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeZustimmungSepaAsync
     *
     * Retrieving the approval text for the SEPA scheme
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeZustimmungSepaAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executeZustimmungSepaAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeZustimmungSepaAsyncWithHttpInfo
     *
     * Retrieving the approval text for the SEPA scheme
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeZustimmungSepaAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\ZustimmungSepaResponse';
        $request = $this->executeZustimmungSepaRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeZustimmungSepa'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeZustimmungSepaRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeZustimmungSepa'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeZustimmungSepa'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeZustimmungSepa'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/zustimmung/sepa';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mTanVersenden
     *
     * Triggers the sending of an mTAN again.
     *
     * @param  string $tbk_rk_shop tbk_rk_shop (required)
     * @param  string $tbk_rk_token tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mTanVersenden($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->mTanVersendenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation mTanVersendenWithHttpInfo
     *
     * Triggers the sending of an mTAN again.
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mTanVersendenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = 'object';
        $request = $this->mTanVersendenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mTanVersendenAsync
     *
     * Triggers the sending of an mTAN again.
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mTanVersendenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->mTanVersendenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mTanVersendenAsyncWithHttpInfo
     *
     * Triggers the sending of an mTAN again.
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mTanVersendenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = 'object';
        $request = $this->mTanVersendenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mTanVersenden'
     *
     * @param  string $tbk_rk_shop (required)
     * @param  string $tbk_rk_token (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mTanVersendenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling mTanVersenden'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling mTanVersenden'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling mTanVersenden'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/mTANversenden';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
