<?php
/**
 * TransactionApi
 * PHP version 5
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ratenkauf REST API
 *
 * Version: V2  With the help of the REST API, webshop operators or business partners can integrate the ratenkauf by easyCredit into a webshop. Thus you have the possibility to integrate the ratenkauf by easyCredit into your webshop according to your own needs.  To initialize and complete a Ratenkauf using the REST API,the webshop system must authenticate itself against the REST API installment purchase. To do this, the webshop ID and the API password must be entered in the respective attributes in the header of the request.  You will receive your personal webshop identification after conclusion of the contract with us.  Would you like to use installment purchase by easyCredit?  Register directly under: [Registration](https://www.easycredit.de/ratenkaufpartner/registrierung.htm) and we will get in touch with you.   On our Ratenkauf Partner Site [Ratenkauf Partner Site](https://www.easycredit-ratenkauf.de/einbindung.htm)  we provide many shop plugins and additional integration guides.  API Root URL: https://ratenkauf.easycredit.de/ratenkauf-ws/rest/v2
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vismutx\EasycreditApiPhp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vismutx\EasycreditApiPhp\ApiException;
use Vismutx\EasycreditApiPhp\Configuration;
use Vismutx\EasycreditApiPhp\HeaderSelector;
use Vismutx\EasycreditApiPhp\ObjectSerializer;

/**
 * TransactionApi Class Doc Comment
 *
 * @category Class
 * @package  Vismutx\EasycreditApiPhp
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation executeAllgemeineVorgangsdatenLaden
     *
     * Loads the general transaction data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\AllgemeineVorgangsdatenLadenResponse
     */
    public function executeAllgemeineVorgangsdatenLaden($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->executeAllgemeineVorgangsdatenLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation executeAllgemeineVorgangsdatenLadenWithHttpInfo
     *
     * Loads the general transaction data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\AllgemeineVorgangsdatenLadenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeAllgemeineVorgangsdatenLadenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\AllgemeineVorgangsdatenLadenResponse';
        $request = $this->executeAllgemeineVorgangsdatenLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\AllgemeineVorgangsdatenLadenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeAllgemeineVorgangsdatenLadenAsync
     *
     * Loads the general transaction data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeAllgemeineVorgangsdatenLadenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executeAllgemeineVorgangsdatenLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeAllgemeineVorgangsdatenLadenAsyncWithHttpInfo
     *
     * Loads the general transaction data
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeAllgemeineVorgangsdatenLadenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\AllgemeineVorgangsdatenLadenResponse';
        $request = $this->executeAllgemeineVorgangsdatenLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeAllgemeineVorgangsdatenLaden'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeAllgemeineVorgangsdatenLadenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeAllgemeineVorgangsdatenLaden'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeAllgemeineVorgangsdatenLaden'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeAllgemeineVorgangsdatenLaden'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeEntscheidungDurchfuehren
     *
     * Executes the decision
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\EntscheidungDurchfuehrenResponse
     */
    public function executeEntscheidungDurchfuehren($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        list($response) = $this->executeEntscheidungDurchfuehrenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);
        return $response;
    }

    /**
     * Operation executeEntscheidungDurchfuehrenWithHttpInfo
     *
     * Executes the decision
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\EntscheidungDurchfuehrenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeEntscheidungDurchfuehrenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\EntscheidungDurchfuehrenResponse';
        $request = $this->executeEntscheidungDurchfuehrenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\EntscheidungDurchfuehrenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeEntscheidungDurchfuehrenAsync
     *
     * Executes the decision
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeEntscheidungDurchfuehrenAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        return $this->executeEntscheidungDurchfuehrenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeEntscheidungDurchfuehrenAsyncWithHttpInfo
     *
     * Executes the decision
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeEntscheidungDurchfuehrenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\EntscheidungDurchfuehrenResponse';
        $request = $this->executeEntscheidungDurchfuehrenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeEntscheidungDurchfuehren'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeEntscheidungDurchfuehrenRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeEntscheidungDurchfuehren'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeEntscheidungDurchfuehren'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeEntscheidungDurchfuehren'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/entscheiden';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeMtanValidieren
     *
     * Verify mTAN
     *
     * @param  string $vorgangskennung Technical transaction id (required)
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\MtanRequest $body body (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function executeMtanValidieren($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body)
    {
        $this->executeMtanValidierenWithHttpInfo($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body);
    }

    /**
     * Operation executeMtanValidierenWithHttpInfo
     *
     * Verify mTAN
     *
     * @param  string $vorgangskennung Technical transaction id (required)
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\MtanRequest $body (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeMtanValidierenWithHttpInfo($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body)
    {
        $returnType = '';
        $request = $this->executeMtanValidierenRequest($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeMtanValidierenAsync
     *
     * Verify mTAN
     *
     * @param  string $vorgangskennung Technical transaction id (required)
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\MtanRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeMtanValidierenAsync($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body)
    {
        return $this->executeMtanValidierenAsyncWithHttpInfo($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeMtanValidierenAsyncWithHttpInfo
     *
     * Verify mTAN
     *
     * @param  string $vorgangskennung Technical transaction id (required)
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\MtanRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeMtanValidierenAsyncWithHttpInfo($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body)
    {
        $returnType = '';
        $request = $this->executeMtanValidierenRequest($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeMtanValidieren'
     *
     * @param  string $vorgangskennung Technical transaction id (required)
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\MtanRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeMtanValidierenRequest($vorgangskennung, $tbk_rk_shop, $tbk_rk_token, $body)
    {
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeMtanValidieren'
            );
        }
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeMtanValidieren'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeMtanValidieren'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling executeMtanValidieren'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}/mTAN';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeVorgangInitialisieren
     *
     * Initializes the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenRequest $body Request data (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenResponse
     */
    public function executeVorgangInitialisieren($tbk_rk_shop, $tbk_rk_token, $body)
    {
        list($response) = $this->executeVorgangInitialisierenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $body);
        return $response;
    }

    /**
     * Operation executeVorgangInitialisierenWithHttpInfo
     *
     * Initializes the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenRequest $body Request data (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeVorgangInitialisierenWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $body)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenResponse';
        $request = $this->executeVorgangInitialisierenRequest($tbk_rk_shop, $tbk_rk_token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeVorgangInitialisierenAsync
     *
     * Initializes the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenRequest $body Request data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeVorgangInitialisierenAsync($tbk_rk_shop, $tbk_rk_token, $body)
    {
        return $this->executeVorgangInitialisierenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeVorgangInitialisierenAsyncWithHttpInfo
     *
     * Initializes the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenRequest $body Request data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeVorgangInitialisierenAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $body)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenResponse';
        $request = $this->executeVorgangInitialisierenRequest($tbk_rk_shop, $tbk_rk_token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeVorgangInitialisieren'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangInitialisierenRequest $body Request data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeVorgangInitialisierenRequest($tbk_rk_shop, $tbk_rk_token, $body)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeVorgangInitialisieren'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeVorgangInitialisieren'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling executeVorgangInitialisieren'
            );
        }

        $resourcePath = '/vorgang';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeVorgangSpeichern
     *
     * Saves the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernRequest $body Transaction data to be saved (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse
     */
    public function executeVorgangSpeichern($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body)
    {
        list($response) = $this->executeVorgangSpeichernWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body);
        return $response;
    }

    /**
     * Operation executeVorgangSpeichernWithHttpInfo
     *
     * Saves the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernRequest $body Transaction data to be saved (required)
     *
     * @throws \Vismutx\EasycreditApiPhp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeVorgangSpeichernWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse';
        $request = $this->executeVorgangSpeichernRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeVorgangSpeichernAsync
     *
     * Saves the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernRequest $body Transaction data to be saved (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeVorgangSpeichernAsync($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body)
    {
        return $this->executeVorgangSpeichernAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeVorgangSpeichernAsyncWithHttpInfo
     *
     * Saves the transaction
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernRequest $body Transaction data to be saved (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeVorgangSpeichernAsyncWithHttpInfo($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body)
    {
        $returnType = '\Vismutx\EasycreditApiPhp\Model\VorgangSpeichernResponse';
        $request = $this->executeVorgangSpeichernRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeVorgangSpeichern'
     *
     * @param  string $tbk_rk_shop Webshop-ID (required)
     * @param  string $tbk_rk_token API-Password (required)
     * @param  string $vorgangskennung A valid technical transaction id (required)
     * @param  \Vismutx\EasycreditApiPhp\Model\VorgangSpeichernRequest $body Transaction data to be saved (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeVorgangSpeichernRequest($tbk_rk_shop, $tbk_rk_token, $vorgangskennung, $body)
    {
        // verify the required parameter 'tbk_rk_shop' is set
        if ($tbk_rk_shop === null || (is_array($tbk_rk_shop) && count($tbk_rk_shop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_shop when calling executeVorgangSpeichern'
            );
        }
        // verify the required parameter 'tbk_rk_token' is set
        if ($tbk_rk_token === null || (is_array($tbk_rk_token) && count($tbk_rk_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tbk_rk_token when calling executeVorgangSpeichern'
            );
        }
        // verify the required parameter 'vorgangskennung' is set
        if ($vorgangskennung === null || (is_array($vorgangskennung) && count($vorgangskennung) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vorgangskennung when calling executeVorgangSpeichern'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling executeVorgangSpeichern'
            );
        }

        $resourcePath = '/vorgang/{vorgangskennung}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($tbk_rk_shop !== null) {
            $headerParams['tbk-rk-shop'] = ObjectSerializer::toHeaderValue($tbk_rk_shop);
        }
        // header params
        if ($tbk_rk_token !== null) {
            $headerParams['tbk-rk-token'] = ObjectSerializer::toHeaderValue($tbk_rk_token);
        }

        // path params
        if ($vorgangskennung !== null) {
            $resourcePath = str_replace(
                '{' . 'vorgangskennung' . '}',
                ObjectSerializer::toPathValue($vorgangskennung),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
